---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';
import { marked } from 'marked';
import {CreationDetailImages} from '../components/CreationDetailImages';
import {ImageZoom} from '../components/ImageZoom';
import {withQueryParams} from '../utils/url';

import './CreationDetail.scss'
import BaseLayout from './BaseLayout.astro';

type Props = CollectionEntry<'collection'>['data'];

const { title, descriptionMd, date, subtext, heroImage, media, link, shouldIframe, movieUrl, materials, imageDescriptions} = Astro.props;
const descriptionParsed = marked.parse(descriptionMd.replaceAll('\n', '\n\n'), {breaks: true, gfm: true});

const transformedMovieUrl = movieUrl ? withQueryParams(
              movieUrl.replace(
                "https://codahosted.io",
                "https://codaio.imgix.net"
              ),
              {
                auto: "format,compress",
                fit: "max",
                w: "1200",
                h: "650",
              }
            ) : movieUrl;
const transformedHeroImage = heroImage ? withQueryParams(
              heroImage.replace(
                "https://codahosted.io",
                "https://codaio.imgix.net"
              ),
              {
                auto: "format,compress",
                fit: "max",
                w: "1200",
                h: "650",
              }
            ) : heroImage;
const mediaTransformed = media.map((item) => {
  return withQueryParams(item.replace(
		"https://codahosted.io",
		"https://codaio.imgix.net"
	  ),
	  {
		auto: "format,compress",
		fit: "max",
		w: "700",
	  });
});
---

<BaseLayout title={title} description={subtext} image={heroImage}>
	<main class="creationDetail">
		<article>
			<div class="content">
			<div class="prose">
				<div class="header">
					<div class="date">
						{date && <FormattedDate date={date} />}
					</div>
					<h2>
					{link ? <a href={link}>{title}</a> : title}
					</h2>
					<i >{subtext}</i>
					{materials && <i class="meta" >Materials: {materials}</i>}
				</div>
				<p set:html={descriptionParsed}></p>
				<slot />
			</div>
			<div>
			{shouldIframe ? <div class="iframeWrapper">
				<iframe src={link}></iframe>
				<div>window into <a href={link}>{link}</a></div>
			</div> : <div class="hero-image">
				{movieUrl ? <video controls autoplay loop>
					<source src={transformedMovieUrl} type="video/webm" />
				</video>  : <ImageZoom client:only="react" src={transformedHeroImage} />}
				{!movieUrl && imageDescriptions?.[0] && <span class="descriptionText">{imageDescriptions[0]}</span>}
			</div>}
			<CreationDetailImages images={mediaTransformed.slice(movieUrl ? 0 : 1, media.length)} descriptions={imageDescriptions ? imageDescriptions.slice(movieUrl ? 0 : 1) : []} client:only="react"></CreationDetailImages>
			<div >
			</div>
			</div>
			</div>
		</article>
	</main>
</BaseLayout>
